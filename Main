{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":2157,"sourceType":"datasetVersion","datasetId":18}],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Project Goal: Sentiment Analysis on Amazon Reviews\n\nThis project will cover sentiment analysis in python using two methods.\n1. NLTK - VADER\n2. Huggingface - Robert","metadata":{}},{"cell_type":"markdown","source":"## Approach 1: NLTK","metadata":{}},{"cell_type":"markdown","source":"#### Step 1 - setting up the environment/data","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nplt.style.use(\"ggplot\")\n\nimport nltk","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-11-20T02:22:32.214405Z","iopub.execute_input":"2024-11-20T02:22:32.214758Z","iopub.status.idle":"2024-11-20T02:22:36.043387Z","shell.execute_reply.started":"2024-11-20T02:22:32.214728Z","shell.execute_reply":"2024-11-20T02:22:36.042249Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"#load data\ndf = pd.read_csv(\"/kaggle/input/amazon-fine-food-reviews/Reviews.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-11-20T02:32:19.814185Z","iopub.execute_input":"2024-11-20T02:32:19.814637Z","iopub.status.idle":"2024-11-20T02:32:27.992227Z","shell.execute_reply.started":"2024-11-20T02:32:19.814599Z","shell.execute_reply":"2024-11-20T02:32:27.991094Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"df[\"text\"].values[0]","metadata":{"execution":{"iopub.status.busy":"2024-11-20T02:33:10.860707Z","iopub.execute_input":"2024-11-20T02:33:10.861103Z","iopub.status.idle":"2024-11-20T02:33:10.874382Z","shell.execute_reply.started":"2024-11-20T02:33:10.861067Z","shell.execute_reply":"2024-11-20T02:33:10.873262Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   Id   ProductId          UserId ProfileName  HelpfulnessNumerator  \\\n0   1  B001E4KFG0  A3SGXH7AUHU8GW  delmartian                     1   \n1   2  B00813GRG4  A1D87F6ZCVE5NK      dll pa                     0   \n\n   HelpfulnessDenominator  Score        Time                Summary  \\\n0                       1      5  1303862400  Good Quality Dog Food   \n1                       0      1  1346976000      Not as Advertised   \n\n                                                Text  \n0  I have bought several of the Vitality canned d...  \n1  Product arrived labeled as Jumbo Salted Peanut...  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>ProductId</th>\n      <th>UserId</th>\n      <th>ProfileName</th>\n      <th>HelpfulnessNumerator</th>\n      <th>HelpfulnessDenominator</th>\n      <th>Score</th>\n      <th>Time</th>\n      <th>Summary</th>\n      <th>Text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>B001E4KFG0</td>\n      <td>A3SGXH7AUHU8GW</td>\n      <td>delmartian</td>\n      <td>1</td>\n      <td>1</td>\n      <td>5</td>\n      <td>1303862400</td>\n      <td>Good Quality Dog Food</td>\n      <td>I have bought several of the Vitality canned d...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>B00813GRG4</td>\n      <td>A1D87F6ZCVE5NK</td>\n      <td>dll pa</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1346976000</td>\n      <td>Not as Advertised</td>\n      <td>Product arrived labeled as Jumbo Salted Peanut...</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}